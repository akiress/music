#N canvas 282 55 779 740 10;
#X obj 513 34 soundfiler;
#X msg 513 12 read -resize breaking-saucer.wav mysample;
#N canvas 0 22 450 278 (subpatch) 0;
#X array mysample 663392 float 2;
#X coords 0 1 663392 -1 200 140 1;
#X restore 513 142 graph;
#X floatatom 513 56 10 0 0 0 - - -;
#X obj 23 600 tabread4~ mysample;
#X obj 513 79 s samplelength;
#X obj 13 190 r samplelength;
#X floatatom 13 212 5 0 0 0 - - -;
#N canvas 574 355 299 115 get-sampling-rate 0;
#X obj 11 12 r pd;
#X obj 11 37 zl nth 18;
#X floatatom 11 62 8 0 0 0 - - -;
#X text 66 62 Samples/sec;
#X text 74 36 To pick out the audio sampling rate;
#X obj 11 86 outlet;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 5 0;
#X restore 161 278 pd get-sampling-rate;
#X obj 122 322 / 44100;
#X floatatom 161 301 5 0 0 0 - - -;
#X text 49 213 Length of loaded sound in samples;
#X obj 122 345 * 1000;
#X floatatom 122 368 5 0 0 0 - - -;
#X text 158 369 Length of loaded sound in ms;
#X text 164 344 <-- To convert seconds to ms;
#X obj 13 442 pack 0 0;
#X obj 13 234 t f f;
#X obj 13 465 prepend set;
#X msg 13 488 663392 15042.9;
#X obj 12 696 dac~;
#X text 590 694 Patch made by Edgar Berdahl;
#X obj 327 554 line~;
#X msg 496 -14 read -resize johnshort.wav mysample;
#X obj 23 671 *~ 0.25;
#N canvas 796 299 147 133 convert-audio-to-events 0;
#X obj 16 81 snapshot~;
#X obj 74 9 loadbang;
#X obj 74 31 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1 1
;
#X obj 74 51 metro 30;
#X obj 16 103 outlet;
#X obj 16 25 inlet~;
#X connect 0 0 4 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 0 0;
#X connect 5 0 0 0;
#X restore 341 631 pd convert-audio-to-events;
#X floatatom 341 653 8 0 0 0 - - -;
#X obj 23 648 *~;
#X msg 327 531 0 \, 511 50;
#N canvas 416 300 367 283 generate-window 0;
#X obj 8 115 Uzi 512;
#X obj 8 139 counter 0 0 511;
#X obj 8 94 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 8 164 t f f;
#X obj 278 142 loadbang;
#X msg 278 165 511;
#X obj 35 188 expr 0.5-0.5*cos((2*3.14159265*$f1)/$f2);
#X obj 48 234 sqrt;
#X text 6 3 Here we generate the square root of a Hanning window of
length 512 and store it in the table called mywindow.;
#X obj 7 33 table mywindow 512;
#X obj 8 258 peek~ mywindow;
#X obj 8 72 loadbang;
#X connect 0 0 1 0;
#X connect 1 0 3 0;
#X connect 2 0 0 0;
#X connect 3 0 10 0;
#X connect 3 1 6 0;
#X connect 4 0 5 0;
#X connect 5 0 6 1;
#X connect 6 0 7 0;
#X connect 7 0 10 1;
#X connect 11 0 2 0;
#X restore 444 694 pd generate-window;
#X obj 327 577 tabread4~ mywindow;
#X text 578 55 Size of loaded sound in samples;
#X text 10 -13 Make a granular synthesizer:;
#X text 12 6 1) First modify the patch below so that it plays single
grains out of mysample using the window mywindow.;
#X text 13 70 3) Then move the patch into an abstraction.;
#X text 12 93 4) Create a parent patch allowing multiple abstractions
to run simultaneously to get a denser sound.;
#X text 13 131 5) Refine your granular synthesizer patch until you
are satisfied with the sound.;
#X text 12 41 2) Make the grain length a variable parameter.;
#X connect 0 0 3 0;
#X connect 1 0 0 0;
#X connect 3 0 5 0;
#X connect 4 0 27 0;
#X connect 6 0 7 0;
#X connect 7 0 17 0;
#X connect 8 0 10 0;
#X connect 9 0 12 0;
#X connect 10 0 9 1;
#X connect 12 0 13 0;
#X connect 13 0 16 1;
#X connect 16 0 18 0;
#X connect 17 0 16 0;
#X connect 17 1 9 0;
#X connect 18 0 19 0;
#X connect 22 0 30 0;
#X connect 23 0 0 0;
#X connect 24 0 20 0;
#X connect 24 0 20 1;
#X connect 25 0 26 0;
#X connect 27 0 24 0;
#X connect 28 0 22 0;
#X connect 30 0 25 0;
#X connect 30 0 27 1;
